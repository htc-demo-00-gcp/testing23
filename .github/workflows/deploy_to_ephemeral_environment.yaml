name: Deploy to ephemeral environment
on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
jobs:
  scaffold:
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
      CANYON_AUTH_TOKEN: ${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN }}
      CANYON_ORG: ${{ secrets.CANYON_DEMO_CANYON_ORG }}
      CANYON_API_URL: ${{ secrets.CANYON_DEMO_CANYON_API_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create environment
        run: ./canyon create environment $REPOSITORY ephemeral-pr-$PULL_REQUEST_NUMBER --set env_type_id=development || true
  
  release:
    needs: scaffold
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
      CANYON_AUTH_TOKEN: ${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN }}
      CANYON_ORG: ${{ secrets.CANYON_DEMO_CANYON_ORG }}
      CANYON_API_URL: ${{ secrets.CANYON_DEMO_CANYON_API_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.CANYON_DEMO_GCP_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet

      - name: Build and push Docker image
        run: |
          docker buildx build \
          --platform=linux/amd64 \
          -t europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/app:${{ github.sha }} \
          --push .

      - name: Deploy application
        run: ./canyon deploy $REPOSITORY ephemeral-pr-$PULL_REQUEST_NUMBER ./manifest.yaml --no-prompt --output values.yaml

      - name: Set up Python (for parsing YAML)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install PyYAML
        run: pip install pyyaml
      - name: Read HOST from YAML
        id: parse_yaml
        run: |
          import yaml
          with open("values.yaml", "r") as f:
              config = yaml.safe_load(f)
          print(f"::set-output name=bucket-name::{config['main'].get('BUCKET_NAME', 'unspecified')}")
          print(f"::set-output name=queue-name::{config['main'].get('QUEUE_NAME', 'unspecified')}")
          print(f"::set-output name=service-account::{config['main'].get('SERVICE_ACCOUNT', 'unspecified')}")
          print(f"::set-output name=namespace::{config['main'].get('NAMESPACE', 'unspecified')}")
        shell: python
      
      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> $GITHUB_ENV
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials canyon-demo-gke --region europe-west3 --project htc-demo-00-gcp
      - name: Set up Helm
        uses: azure/setup-helm@v3
      - name: Run Helm Upgrade
        run: |
          helm upgrade --install hello-world ./chart \
            --set image.tag=${{ github.sha }} \
            --set bucket.name=${{ steps.parse_yaml.outputs.bucket-name }} \
            --set queue.name=${{ steps.parse_yaml.outputs.queue-name }} \
            --set serviceAccount=${{ steps.parse_yaml.outputs.service-account }} \
            --namespace=${{ steps.parse_yaml.outputs.namespace }}

      - name: Wait for LoadBalancer IP
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc hello-world-hello-world -n ${{ steps.parse_yaml.outputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "Service is available at IP: $IP"
              echo "APP_IP=$IP" >> $GITHUB_ENV
              break
            fi
            echo "Still waiting..."
            sleep 10
          done

      - name: Print Application IP
        run: echo "Application is available at http://${{ env.APP_IP }}"
